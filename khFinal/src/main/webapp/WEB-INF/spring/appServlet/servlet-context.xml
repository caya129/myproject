<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	
	<!-- auto scan -->
	<context:component-scan base-package="kr.gazeua.member.controller" />
	<context:component-scan base-package="kr.gazeua.record.controller" />
	<context:component-scan base-package="kr.gazeua.review.controller" />
	<context:component-scan base-package="kr.gazeua.order.controller" />
	
	<!-- main page 설정 ; data setting이 없을 경우 아래처럼 사용하면 controller 없이 뷰를 바로 호출 가능-->
	<view-controller path="/main/main.do" view-name="main"/>
	<view-controller path="/main/orderMain.do" view-name="orderMain"/>
	
	
	<!-- tiles setting location -->
	<beans:bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>/WEB-INF/tiles-def/main.xml</beans:value>
				<!--실제 사용시 풀어주기 
				<beans:value>/WEB-INF/tiles-def/member.xml</beans:value>
				<beans:value>/WEB-INF/tiles-def/record.xml</beans:value>
				<beans:value>/WEB-INF/tiles-def/order.xml</beans:value>
				<beans:value>/WEB-INF/tiles-def/review.xml</beans:value> -->
			</beans:list>
		</beans:property>
	</beans:bean>	
	
	<!-- view resolver  -->
	<beans:bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView"/>
		<!-- view resolver가 두개이므로 순서 지정해줌. 이게 먼저 -->
		<beans:property name="order" value="1"/>
	</beans:bean>

	<!-- popup 창 또는 Ajax 통신 등 tiles를 사용하지 않고 JSP를 호출해야하는 경우 사용 -->
	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="2"/>
	</beans:bean>
	
	<!-- 파일 다운로드 관련 view Resolver -->
	<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver"
		p:order="0"/>
	
	
	<!-- 파일 업로드 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="52428800"/>
		<beans:property name="defaultEncoding" value="UTF-8"/>
		
		
	</beans:bean>
	
	<!-- 메시지 처리 -->
	<beans:bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource">
		<beans:property name="basenames">
			<beans:list>
				<beans:value>messages.validation</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>
	
	<!-- 
	interceptor는 하면서 추가하기
	로그인 여부 체크 -->
	<!-- <interceptors>
		<interceptor>
			<mapping path="/member/detail.do"/>
			<mapping path="/member/update.do"/>
			<mapping path="/member/delete.do"/>
			<beans:bean class="kr.spring.interceptor.LoginCheckInterceptor"/>
		</interceptor>
	</interceptors>
	 -->
</beans:beans>
